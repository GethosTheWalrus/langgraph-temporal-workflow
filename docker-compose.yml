services:
  # Temporal Server Services
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:latest
    networks:
      - temporal-network
    ports:
      - 5432:5432
    volumes:
      - postgresdata:/var/lib/postgresql/data
    profiles:
      - temporal
      - workers
      - csharp
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/auto-setup:latest
    networks:
      - temporal-network
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    profiles:
      - temporal
      - workers
      - csharp
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:latest
    networks:
      - temporal-network
    stdin_open: true
    tty: true
    profiles:
      - temporal
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:latest
    networks:
      - temporal-network
    ports:
      - 8080:8080
    profiles:
      - temporal
    
  # Application PostgreSQL Database with init scripts
  app-postgres:
    container_name: app-postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
    ports:
      - "5433:5432"  # Different port to avoid conflict with Temporal's postgres
    networks:
      - temporal-network
    volumes:
      - app_postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d/  # Mount init scripts
    profiles:
      - temporal
      - workers
      - clients
    restart: unless-stopped

  # Redis Stack for LangGraph state persistence (includes RedisJSON and RediSearch)
  redis:
    container_name: redis
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    networks:
      - temporal-network
    volumes:
      - redis_data:/data
    profiles:
      - temporal
      - workers
      - clients

  # Temporal Worker Services
  python-worker:
    container_name: python-worker
    build:
      context: ./workers/python
      dockerfile: Dockerfile
    networks:
      - temporal-network
    depends_on:
      - redis
      - app-postgres
    profiles:
      - workers

  # Temporal Clients
  python-client:
    container_name: python-client
    build:
      context: ./clients/python
      dockerfile: Dockerfile
    networks:
      - temporal-network
    environment:
      # Database configuration (clients pass these to workflows)
      - POSTGRES_HOST=app-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=apppassword
      # Ollama configuration (clients pass these to workflows)
      - OLLAMA_BASE_URL=http://host.docker.internal:11434 # upate this to your Ollama host
      - OLLAMA_MODEL_NAME=qwen3:8b
      - OLLAMA_TEMPERATURE=0.0
      # Redis configuration
      - REDIS_URL=redis://redis:6379
    profiles:
      - clients
  csharp-client:
    container_name: csharp-client
    build:
      context: ./clients/csharp
      dockerfile: Dockerfile.interactive  # Change to Dockerfile.basic for basic client
    networks:
      - temporal-network
    environment:
      # Database configuration (clients pass these to workflows)
      - POSTGRES_HOST=app-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=apppassword
      # Ollama configuration (clients pass these to workflows)
      - OLLAMA_BASE_URL=http://host.docker.internal:11434 # upate this to your Ollama host
      - OLLAMA_MODEL_NAME=qwen3:8b
      - OLLAMA_TEMPERATURE=0.0
      # Redis configuration
      - REDIS_URL=redis://redis:6379
    profiles:
      - clients

volumes:
    postgresdata:
    app_postgres_data:
    redis_data:

networks:
  temporal-network:
    driver: bridge
    name: temporal-network